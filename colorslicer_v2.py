import gradio as gr
from color_sep_funcs import kmeans_discretize
from color_sep_funcs import separate_colors
import re
import tempfile
import os
from PIL import Image
import numpy as np

# Function to convert key colors input into a Python list
def parse_key_colors(key_colors):
    if key_colors:
        try:
            # Split the input by commas and strip whitespace from each element
            colors = [color.strip() for color in key_colors.strip().split(',')]
            # Validate the format of each color
            hex_pattern = re.compile(r"^#(?:[0-9a-fA-F]{3}){1,2}$")
            for color in colors:
                if not hex_pattern.match(color):
                    return None, "Invalid color format detected. Please use comma-separated hex codes like #FF0000,#00FF00."
            return colors, ""
        except Exception:
            return None, "Error processing colors. Ensure correct format."
    return None, ""

# Modified version of the separate_colors function
def separate_colors_and_display(image_path, n_colors=None, precision=0):
    try:
        # Use a temporary directory to store images
        with tempfile.TemporaryDirectory() as temp_dir:
            # Call the original function to separate colors and save files in temp_dir
            print("Calling separate_colors function...")
            separate_colors(image_path, n_colors=n_colors, output_dir=temp_dir, precision=precision)

            # Construct the path to the separated colors subdirectory
            separated_colors_dir = os.path.join(
                temp_dir, f"{os.path.splitext(os.path.basename(image_path))[0]}_separated_colors"
            )
            print("Separated colors directory:", separated_colors_dir)

            # Verify the subdirectory exists
            if not os.path.exists(separated_colors_dir) or not os.path.isdir(separated_colors_dir):
                raise RuntimeError("Separated colors directory not found. Check the function's behavior.")

            # Verify the files in the separated colors directory
            generated_files = os.listdir(separated_colors_dir)
            print("Files generated by separate_colors:", generated_files)

            if not generated_files:
                raise RuntimeError("No images were generated by separate_colors. Check the function's behavior.")

            # Load and return the images as PIL objects
            images = []
            for file_name in generated_files:
                file_path = os.path.join(separated_colors_dir, file_name)
                images.append(Image.open(file_path))

            return images
    except Exception as e:
        raise RuntimeError(f"Error in separate_colors_and_display: {e}")
# Define the Gradio interface
def process_image(image, n_colors, key_colors):
    try:
        # Parse the key_colors input
        key_colors_list, message = parse_key_colors(key_colors)

        # Print parameters to the terminal
        print("Image Path:", image)
        print("Number of Colors:", n_colors)
        print("Key Colors List:", key_colors_list)

        # If the color format is incorrect, return the message
        if message:
            return None, message, []

        # Call the imported function
        discretized_image = kmeans_discretize(image, n_colors, key_colors_list)

        # Save the discretized image to a temporary file
        temp_image_path = tempfile.NamedTemporaryFile(delete=False, suffix=".png").name
        Image.fromarray(np.array(discretized_image)).save(temp_image_path)
        print("Discretized image saved at:", temp_image_path)

        # Call the modified separate_colors_and_display function
        color_images = separate_colors_and_display(temp_image_path, n_colors=n_colors)

        return discretized_image, "", color_images
    except Exception as e:
        return None, f"Error: {str(e)}", []

# Create Gradio interface
demo = gr.Interface(
    fn=process_image,
    inputs=[
        gr.Image(type="filepath", label="Upload Image"),
        gr.Slider(minimum=2, maximum=10, step=1, value=8, label="Number of Colors"),
        gr.Textbox(label="Key Colors (comma-separated hex codes; optional)", placeholder="e.g. #FF0000,#00FF00")
    ],
    outputs=[
        gr.Image(type="pil", label="Discretized Image"),
        gr.Textbox(label="Message"),
        gr.Gallery(label="Separated Color Images")
    ],
    title="K-means Image Discretizer",
    description="Upload an image, select the number of colors, and optionally specify key colors (as hex codes) to reduce the image's colors using K-means. Then view and download the separated color images individually."
)

# Launch the interface
if __name__ == "__main__":
    demo.launch()
